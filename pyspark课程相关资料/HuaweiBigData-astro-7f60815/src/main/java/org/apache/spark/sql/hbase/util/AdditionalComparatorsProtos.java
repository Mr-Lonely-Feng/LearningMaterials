// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdditionalComparators.proto

package org.apache.spark.sql.hbase.util;

public final class AdditionalComparatorsProtos {
  private AdditionalComparatorsProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ByteArrayComparableOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bytes value = 1;
    /**
     * <code>optional bytes value = 1;</code>
     */
    boolean hasValue();
    /**
     * <code>optional bytes value = 1;</code>
     */
    com.google.protobuf.ByteString getValue();
  }
  /**
   * Protobuf type {@code ByteArrayComparable}
   */
  public static final class ByteArrayComparable extends
      com.google.protobuf.GeneratedMessage
      implements ByteArrayComparableOrBuilder {
    // Use ByteArrayComparable.newBuilder() to construct.
    private ByteArrayComparable(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ByteArrayComparable(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ByteArrayComparable defaultInstance;
    public static ByteArrayComparable getDefaultInstance() {
      return defaultInstance;
    }

    public ByteArrayComparable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ByteArrayComparable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              value_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_ByteArrayComparable_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_ByteArrayComparable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.class, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder.class);
    }

    public static com.google.protobuf.Parser<ByteArrayComparable> PARSER =
        new com.google.protobuf.AbstractParser<ByteArrayComparable>() {
      public ByteArrayComparable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ByteArrayComparable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ByteArrayComparable> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bytes value = 1;
    public static final int VALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString value_;
    /**
     * <code>optional bytes value = 1;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes value = 1;</code>
     */
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }

    private void initFields() {
      value_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable other = (org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable) obj;

      boolean result = true;
      result = result && (hasValue() == other.hasValue());
      if (hasValue()) {
        result = result && getValue()
            .equals(other.getValue());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ByteArrayComparable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_ByteArrayComparable_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_ByteArrayComparable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.class, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder.class);
      }

      // Construct using org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        value_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_ByteArrayComparable_descriptor;
      }

      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable getDefaultInstanceForType() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.getDefaultInstance();
      }

      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable build() {
        org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable buildPartial() {
        org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable result = new org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable) {
          return mergeFrom((org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable other) {
        if (other == org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.getDefaultInstance()) return this;
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bytes value = 1;
      private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes value = 1;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes value = 1;</code>
       */
      public com.google.protobuf.ByteString getValue() {
        return value_;
      }
      /**
       * <code>optional bytes value = 1;</code>
       */
      public Builder setValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes value = 1;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ByteArrayComparable)
    }

    static {
      defaultInstance = new ByteArrayComparable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ByteArrayComparable)
  }

  public interface CustomComparatorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .ByteArrayComparable comparable = 1;
    /**
     * <code>required .ByteArrayComparable comparable = 1;</code>
     */
    boolean hasComparable();
    /**
     * <code>required .ByteArrayComparable comparable = 1;</code>
     */
    org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable getComparable();
    /**
     * <code>required .ByteArrayComparable comparable = 1;</code>
     */
    org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparableOrBuilder getComparableOrBuilder();
  }
  /**
   * Protobuf type {@code CustomComparator}
   */
  public static final class CustomComparator extends
      com.google.protobuf.GeneratedMessage
      implements CustomComparatorOrBuilder {
    // Use CustomComparator.newBuilder() to construct.
    private CustomComparator(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CustomComparator(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CustomComparator defaultInstance;
    public static CustomComparator getDefaultInstance() {
      return defaultInstance;
    }

    public CustomComparator getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CustomComparator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = comparable_.toBuilder();
              }
              comparable_ = input.readMessage(org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(comparable_);
                comparable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_CustomComparator_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_CustomComparator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator.class, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator.Builder.class);
    }

    public static com.google.protobuf.Parser<CustomComparator> PARSER =
        new com.google.protobuf.AbstractParser<CustomComparator>() {
      public CustomComparator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CustomComparator(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CustomComparator> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .ByteArrayComparable comparable = 1;
    public static final int COMPARABLE_FIELD_NUMBER = 1;
    private org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable comparable_;
    /**
     * <code>required .ByteArrayComparable comparable = 1;</code>
     */
    public boolean hasComparable() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ByteArrayComparable comparable = 1;</code>
     */
    public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable getComparable() {
      return comparable_;
    }
    /**
     * <code>required .ByteArrayComparable comparable = 1;</code>
     */
    public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparableOrBuilder getComparableOrBuilder() {
      return comparable_;
    }

    private void initFields() {
      comparable_ = org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasComparable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, comparable_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, comparable_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator other = (org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator) obj;

      boolean result = true;
      result = result && (hasComparable() == other.hasComparable());
      if (hasComparable()) {
        result = result && getComparable()
            .equals(other.getComparable());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasComparable()) {
        hash = (37 * hash) + COMPARABLE_FIELD_NUMBER;
        hash = (53 * hash) + getComparable().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CustomComparator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_CustomComparator_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_CustomComparator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator.class, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator.Builder.class);
      }

      // Construct using org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getComparableFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (comparableBuilder_ == null) {
          comparable_ = org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.getDefaultInstance();
        } else {
          comparableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.internal_static_CustomComparator_descriptor;
      }

      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator getDefaultInstanceForType() {
        return org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator.getDefaultInstance();
      }

      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator build() {
        org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator buildPartial() {
        org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator result = new org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (comparableBuilder_ == null) {
          result.comparable_ = comparable_;
        } else {
          result.comparable_ = comparableBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator) {
          return mergeFrom((org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator other) {
        if (other == org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator.getDefaultInstance()) return this;
        if (other.hasComparable()) {
          mergeComparable(other.getComparable());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasComparable()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.CustomComparator) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ByteArrayComparable comparable = 1;
      private org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable comparable_ = org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparableOrBuilder> comparableBuilder_;
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public boolean hasComparable() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable getComparable() {
        if (comparableBuilder_ == null) {
          return comparable_;
        } else {
          return comparableBuilder_.getMessage();
        }
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public Builder setComparable(org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable value) {
        if (comparableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          comparable_ = value;
          onChanged();
        } else {
          comparableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public Builder setComparable(
          org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder builderForValue) {
        if (comparableBuilder_ == null) {
          comparable_ = builderForValue.build();
          onChanged();
        } else {
          comparableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public Builder mergeComparable(org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable value) {
        if (comparableBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              comparable_ != org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.getDefaultInstance()) {
            comparable_ =
              org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.newBuilder(comparable_).mergeFrom(value).buildPartial();
          } else {
            comparable_ = value;
          }
          onChanged();
        } else {
          comparableBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public Builder clearComparable() {
        if (comparableBuilder_ == null) {
          comparable_ = org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.getDefaultInstance();
          onChanged();
        } else {
          comparableBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder getComparableBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getComparableFieldBuilder().getBuilder();
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      public org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparableOrBuilder getComparableOrBuilder() {
        if (comparableBuilder_ != null) {
          return comparableBuilder_.getMessageOrBuilder();
        } else {
          return comparable_;
        }
      }
      /**
       * <code>required .ByteArrayComparable comparable = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparableOrBuilder> 
          getComparableFieldBuilder() {
        if (comparableBuilder_ == null) {
          comparableBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparable.Builder, org.apache.spark.sql.hbase.util.AdditionalComparatorsProtos.ByteArrayComparableOrBuilder>(
                  comparable_,
                  getParentForChildren(),
                  isClean());
          comparable_ = null;
        }
        return comparableBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:CustomComparator)
    }

    static {
      defaultInstance = new CustomComparator(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:CustomComparator)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ByteArrayComparable_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ByteArrayComparable_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CustomComparator_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CustomComparator_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033AdditionalComparators.proto\"$\n\023ByteArr" +
      "ayComparable\022\r\n\005value\030\001 \001(\014\"<\n\020CustomCom" +
      "parator\022(\n\ncomparable\030\001 \002(\0132\024.ByteArrayC" +
      "omparableBF\n\037org.apache.spark.sql.hbase." +
      "utilB\033AdditionalComparatorsProtosH\001\210\001\001\240\001" +
      "\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ByteArrayComparable_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ByteArrayComparable_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ByteArrayComparable_descriptor,
              new java.lang.String[] { "Value", });
          internal_static_CustomComparator_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_CustomComparator_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CustomComparator_descriptor,
              new java.lang.String[] { "Comparable", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
